// A static import is required in b/g scripts because they are executed in their own env
// not connected to the content scripts where wasm is loaded automatically
import initWasmModule, { hello_background, fetch_playlist } from './wasm/wasm_mod.js';

console.log("Background started v16:42");

// run the wasm initializer before calling wasm methods
// the initializer was generated by wasm_pack
(async () => {
    await initWasmModule();
    hello_background();
})();

function onError(error) {
    console.error(`B/g error: ${error}`);
}

chrome.action.onClicked.addListener(() => {
    console.log("Button clicked");
});



// a temp flag to stop multiple fetches
let fetching = false;


// get Spotify request headers to extract creds
chrome.webRequest.onBeforeSendHeaders.addListener(async function (details) {

    console.log("Listener fired")
    // console.log(details)
    // console.log(details.tabId)
    let authHeaderValue = ''
    let tokenHeaderValue = ''

    // loop through all headers and grab the two we need
    for (const header of details.requestHeaders) {
        if (header.name == 'authorization') {
            authHeaderValue = header.value
            // console.log(authHeaderValue)
        }

        if (header.name == 'client-token') {
            tokenHeaderValue = header.value
            // console.log(tokenHeaderValue)
        }
    }
    // fetch the data from Spotify using the creds extracted earlier
    if (authHeaderValue && tokenHeaderValue && !fetching) {
        fetching = true;
        await fetch_playlist(authHeaderValue, tokenHeaderValue)
    }

    // might need this later to communicate with the content script
    // chrome.tabs
    //     .sendMessage(details.tabId, {
    //         authHeaderValue: authHeaderValue,
    //         tokenHeaderValue: tokenHeaderValue,
    //     })
    //     .catch(onError);
}, { urls: ['https://api-partner.spotify.com/pathfinder/v1/query*'] }, ["requestHeaders"])

// might need this later to grab user IDs
// chrome.cookies.get({ url: 'https://open.spotify.com', name: 'sp_t' },
//   function (cookie) {
//     if (cookie) {
//       console.log(cookie.value);
//     }
//     else {
//       console.log('Can\'t get cookie! Check the name!');
//     }
//   });

// Uplifted from https://developer.chrome.com/docs/extensions/reference/action/#emulating-pageactions-with-declarativecontent
// requires declarativeContent permission
chrome.runtime.onInstalled.addListener(() => {
    // Page actions are disabled by default and enabled on select tabs
    chrome.action.disable();

    // Clear all rules to ensure only our expected rules are set
    chrome.declarativeContent.onPageChanged.removeRules(undefined, () => {
        // Declare a rule to enable the action on example.com pages
        let playlistPageRule = {
            conditions: [
                new chrome.declarativeContent.PageStateMatcher({
                    pageUrl: { hostSuffix: '.spotify.com', pathContains: 'playlist' },
                })
            ],
            actions: [new chrome.declarativeContent.ShowAction()],
        };

        // Finally, apply our new array of rules
        let rules = [playlistPageRule];
        chrome.declarativeContent.onPageChanged.addRules(rules);
        console.log("Button rule added")
    });
});